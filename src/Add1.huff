
/** 
 *  ADD HUFF EXERCISE
 *
 *  When writing solidity, we most times have to perform some mathematical operations like addition etc
 *  
 *  The task is to write within the `MAIN` macro below, a function that takes in a uint256, adds 1 to it and returns the new value
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function add1(uint256) payable returns(uint256)


#define macro MAIN() = takes(0) returns(0) {

    // Get the function selector
    0x00
    calldataload
    0xE0            // 224 32bytes(256bits)-4bytes(32bits)
    shr             //	Logical right shift operation

    // Jump to the implementation of the ADD1 function if the calldata matches the function selector
    __FUNC_SIG(add1) eq add1 jumpi
    
    // Revert if an unrecognized function occured. 
    0x00 0x00 revert

    add1:
        ADD1()

}

#define macro ADD1() = takes(0) returns(0) {
    
    0x04 calldataload     // load first 32 bytes onto the stack [uint256]
    0x01                  // [1,uint256]
    add                   // add 1 1 and uint256 and put the result onto the stack

    0x00 mstore           // place the result in memory
    0x20 0x00 return      // return the result
}
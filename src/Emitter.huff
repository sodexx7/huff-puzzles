 /** 
 *  EMITTER HUFF EXERCISE
 *  
 *  The task is to enable this contract, when the function `value(uint256, uint256)` is called, should
 *  emit an event named `Value(uint256 indexed, uint256)`
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

 #define function value(uint256, uint256) payable returns()
 
 #define event Value(uint256 indexed, uint256)


 #define macro MAIN() = takes(0) returns(0) {

    // Get the function selector
    0x00 calldataload 0xE0 shr

     // Jump to the implementation of the value function if the calldata matches the function selector
    __FUNC_SIG(value) eq value jumpi

     // Revert if an unrecognized function occured. 
    0x00 0x00 revert

    value:
        VALUE()

 }

 #define macro VALUE() = takes(0) returns(0) {  

    
    // stack vlues should as [offset 0x00,size 0x20,topic1:sig topic2:value_indexed] 
    // memory: 0x00 0x20 store: value

    // memory store the second value 
    0x24 calldataload       // [value]
    0x00 mstore             // store the value in the memory 
    
    // topic2 as the indexed value
    0x04 calldataload       // [value_indexed]
    __EVENT_HASH(Value)     // [signature,value_indexed]
    0x20 0x00               // [0x00,0x20,signature,value_indexed]   
    log2 
}

// reference: https://www.evm.codes/#a2?fork=shanghai

/**
TODO: function directly take arguments from the stack.
read https://www.rareskills.io/post/ethereum-events
**/
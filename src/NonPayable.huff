
/** 
 *  NON PAYABLE HUFF EXERCISE
 *
 *  When a user sends a transaction to a smart contract, they can include ether with the transaction.
 *  In solidity we denote that we wish to accept this ether by either marking the function as payable or adding a payable fallback/receive function to our contract
 *  
 *  The task is to write within the `MAIN` macro below, huff code that reverts if ether is sent with the transaction.
 */

#define macro MAIN() = takes(0) returns(0) {
    0x00                   // [0] 
    callvalue              // [msg.value,0]
    gt non_payable jumpi   // [1] if >0 , just jump to non_payable which revert
                           // if  value == 0 ,just return true
        0x01
        0x00 mstore
        0x20 0x00 return      
    non_payable:
    0x00 0x00 revert              
}
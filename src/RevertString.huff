
/**
 *  REVERT_STRING HUFF EXERCISE
 *
 *
 *  When a transaction is being executed within a smart contract, based on the logic of that contract, it can revert if a preset condition is not met.
 *  They're 2 main ways to revert in solidity, 
 *  - using a string error message e,g (`require(x != 0, "Only values above 0");`)
 *  - reverting with a custom error e.g (`if(x == 0) revert OnlyValuesAbove0();`)
 *
 *  The task is to write within the `MAIN` macro below, huff code that reverts (all the time) with the string error message `Only Huff`
*/


#define macro MAIN() = takes(0) returns(0) {

    /********************** the way abi.encoding type: string **********************************************/ 

    // store dynamic offset of 0x20 at 0x00
    // 0x20                                     // [0x20]
    // 0x00                                     // [0x00, 0x20]
    // mstore                                   // []

    // // store string length of 0x09 at 0x20
    // 0x09                                     // [0x0d]
    // 0x20                                     // [0x20, 0x0d]
    // mstore                                   // []

    // // store bytes for "Only Huff" at 0x40
    // __RIGHTPAD(0x4f6e6c792048756666)          // ["Only Huff"]
    // 0x40                                     // [0x40, "Hello, world!"]
    // mstore                                   // []

    // // return full 96 byte value
    // 0x60                                     // [0x60]
    // 0x00                                     // [0x00, 0x60]
    // revert                                   // []
    /********************** the way abi.encoding type: string **********************************************/ 


    /********************** The Seaport method of returning strings. two mstore, which save more gas **********************************************/ 

    // store dynamic offset of 0x20 at 0x00
    0x20                                     // [0x20]
    0x00                                     // [0x00, 0x20]
    mstore                                   // []


    0x94f6e6c792048756666                   // len+string 09 4f6e6c792048756666     right-most store
    0x29    mstore

     // return full 96 byte value
    0x60                                     // [0x60]
    0x00                                     // [0x00, 0x60]
    revert                                   // []
     /********************** The Seaport method of returning strings. two mstore, which save more gas **********************************************/ 
    
    
// can reference:  hello world
// https://docs.huff.sh/tutorial/hello-world/#primer-abi-encoding
//  cast format-bytes32-string "Hello, world!"
// https://docs.huff.sh/tutorial/hello-world/#advanced-topic-the-seaport-method-of-returning-strings

// 3 word, first word: start place, second word: length, third word: actual value.  so string at least: 3 words

}
